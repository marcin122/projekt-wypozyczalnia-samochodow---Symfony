<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;
use Doctrine\Common\Collections\ArrayCollection;

/**
* @ORM\Entity
* @ORM\Table(name="user")
*/
class User implements UserInterface, \Serializable
{
    /**
    * @ORM\Column(type="integer")
    * @ORM\Id
    * @ORM\GeneratedValue(strategy="AUTO")
    */
    private $id;
    
    /**
    * @ORM\Column(type="string", length=65, unique=true)
    * @Assert\NotBlank()
    */
    private $login;
    
    /**
    * @ORM\Column(type="string", length=65, unique=true)
    * @Assert\Email(message = "Adres email nie jest poprawny", checkMX = true)
    */
    private $AdresEmail;
    
    /**
    * @ORM\Column(type="string", length=64)
    */
    private $haslo;
    
    /**
    * @ORM\Column(type="string", length=65)
    * @Assert\NotBlank()
    */
    private $imie;
    
    /**
    * @ORM\Column(type="string", length=65)
    * @Assert\NotBlank()
    */
    private $nazwisko;
    
    /**
    * @ORM\Column(type="string", length=11)
    * @Assert\NotBlank()
    * @Assert\Length(min=11, max=11)
    * @Assert\Regex("/[0-9]{11}/")
    */
    private $Pesel;
    
    /**
    * @ORM\Column(type="string", length=65)
    * @Assert\NotBlank()
    */
    private $ulica;
    
    /**
    * @ORM\Column(type="string", length=4)
    * @Assert\NotBlank()
    */
    private $nr_domu_nr_mieszkania;
    
    /**
    * @ORM\Column(type="string", length=6)
    * @Assert\NotBlank()
    * @Assert\Length(min=6, max=6)
    * @Assert\Regex("/[0-9]{2}-[0-9]{3}/")
    */
    private $kod_pocztowy;
    
    /**
    * @ORM\Column(type="string", length=65)
    * @Assert\NotBlank()
    */
    private $miasto;
    
    /**
    * @ORM\Column(type="string", length=65)
    * @Assert\NotBlank()
    */
    private $kraj;
    
    /**
    * @ORM\Column(type="string", length=9)
    * @Assert\Length(min=9, max=9)
    * @Assert\NotBlank()
    * @Assert\Regex("/[0-9]{9}/")
    */
    private $nr_telefonu;
    
    /**
    * @ORM\Column(name="is_active", type="boolean")
    */
    private $isActive;
    
    /**
    * @ORM\OneToMany(targetEntity="Order", mappedBy="user")
    */
    private $orderUser;
    
    public function __construct()
    {
        $this->isActive=true;
        $this->orderUser=new ArrayCollection();
    
    }
    
    public function getUserName()
    {
        return $this->login;
    }
    
    public function getPassword()
    {
        return $this->haslo;
    }
    
    public function getSalt()
    {
        return null;
    }
    
    public function getRoles()
    {
        return array('ROLE_USER', 'ROLE_ADMIN');
    }
    
    public function eraseCredentials()
    {
        
    }    
    
    public function serialize()
    {
        return serialize(array(
            $this->id,
            $this->AdresEmail,
            $this->haslo,
        ));
    }
    
    public function unserialize($serialized)
    {
        list(
            $this->id,
            $this->AdresEmail,
            $this->haslo,
        )=unserialize($serialized);
    }
    
    /**
    * @Assert\NotBlank()
    * @Assert\Length(min=4, max=8)
    */
    private $plainPassword;

    public function getPlainPassword()
    {
        return $this->plainPassword;
    }

    public function setPlainPassword($password)
    {
        $this->plainPassword = $password;
    }
}
